[] - optional constructs
{} - zero or more repetitions of constructs
() - grouping of constructs
|  - chose of one from many
"" - literal text in definitions 


Program
<program> ::= ["program" <id> ";"] {<declarations>} <compound_statement> "."

Declarations
<declarations> ::= <const_declaration> | <var_declaration> | <type_declaration> | <function_declaration> | <procedure_declaration>
<const_declaration> ::= "const" <one_const_declaration> {<one_const_declaration>}
<one_const_declaration> ::= <id> ":" <type> "=" <exp> ";"

<var_declaration> ::= "var" <one_var_declaration> {<one_var_declaration>}
<one_var_declaration> ::= <id> {"," <id>} ":" <type> ";" | <id> ":" <type> "=" <exp> ";"

<type_declaration> ::= "type" <one_type_declaration> {<one_type_declaration>}
<one_type_declaration> ::= <id> "=" <type> "

<function_declaration> ::= <function_header> {<const_declaration> | <var_declaration> | <type_declaration>} <compound_statement> ";"
<function_header> ::= "function" <id> "(" <parameters> ")" ":" <type> ";"

<procedure_declaration> ::= <procedure_header> {<const_declaration> | <var_declaration> | <type_declaration>} <compound_statement> ";"
<procedure_header> ::= "procedure" <id> "(" <parameters> ")" ";"

<parameters> ::= ["var"] <parameter> {";" ["var"] <parameter>}
<parameter> ::= <id_list> ":" <type>

Statements
<statement> ::= <simple_statement> | <structured_statement>
<statement_sequence> ::= <statement> {";" <statement>}

<simple_statement> ::= <assignment_statement> | <procedure_statement>
<procedure_statement> ::= <id> ["(" <id_list> ")"]
<assignment_statement> ::= <id> ":=" <expression>

<structured_statement> ::= <compound_statement> | <repetitive_statement> | <if_statement>
<compound_statement> ::=  "begin" <statement_sequence> "end"
<repetitive_statement> ::= <for_statement> | <while_statement>
<while_statement> ::= "while" <expression> "do" <statement>
<for_statement> ::= "for" <id> ":=" <expression> "to" <expression> "do" <statement>
<if_statement> ::= "if" <expression> "then" <statement> ["else" <statement>]

Expressions
<expression> ::= <simple_expression> ["=" | "<" | "<=" | ">" | ">=" <simple_expression>]
<simple_expression> ::= {"+" | "-"} <term> {"+" | "-" | "or" <term>}
<term> ::= <factor> {"*" | "/" | "and"  <factor>} ["." <id>]
<factor> ::= <variable> | <number> | <string> | <char> | <double> | "("<expression>")" | <call> | <id> "." <id>
<call> ::= <id> "(" [ <expression> {"," expression} ] ")"

<variable> ::= <id> ["[" <expression_list> "]"]
<expression_list> ::= <expression> {"," <expression>}

Types
<type> ::=  <primitive_type> | <array_type> | <record_type> | <type_identifier>
<primitive_type> ::= "integer" | "double" | "string" | "char"
<array_type> ::= "array" "["<ranges>"]" "of" <primitive_type>
<ranges> ::= <range> {"," <range>}
<range> ::= <int> ".." <int>
<record_type> ::= "record" <field_list> "end"
<field_list> ::= [<record_section> {";" <record_section>}]
<record_section> ::= <id_list> ":" <type>

//
<id_list> ::= <id> {"," <id>}
